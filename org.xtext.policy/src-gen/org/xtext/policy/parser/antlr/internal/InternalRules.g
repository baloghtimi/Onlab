/*
 * generated by Xtext 2.10.0
 */
grammar InternalRules;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.policy.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.policy.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.policy.services.RulesGrammarAccess;

}

@parser::members {

 	private RulesGrammarAccess grammarAccess;

    public InternalRulesParser(TokenStream input, RulesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected RulesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getPolicyPolicyParserRuleCall_0());
			}
			lv_policy_0_0=rulePolicy
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"policy",
					lv_policy_0_0,
					"org.xtext.policy.Rules.Policy");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	iv_rulePolicy=rulePolicy
	{ $current=$iv_rulePolicy.current; }
	EOF;

// Rule Policy
rulePolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getPolicyAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPolicyAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPolicyAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='policy'
							{
								newLeafNode(otherlv_1, grammarAccess.getPolicyAccess().getPolicyKeyword_0_0());
							}
							(
								(
									lv_name_2_0=RULE_ID
									{
										newLeafNode(lv_name_2_0, grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getPolicyRule());
										}
										setWithLastConsumed(
											$current,
											"name",
											lv_name_2_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPolicyAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPolicyAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPolicyAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getPolicyAccess().getAccessAccessibilityLevelEnumRuleCall_1_0());
								}
								lv_access_3_0=ruleAccessibilityLevel
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getPolicyRule());
									}
									set(
										$current,
										"access",
										lv_access_3_0,
										"org.xtext.policy.Rules.AccessibilityLevel");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPolicyAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPolicyAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPolicyAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getPolicyAccess().getOperationOperationTypeEnumRuleCall_2_0_0());
									}
									lv_operation_4_0=ruleOperationType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPolicyRule());
										}
										set(
											$current,
											"operation",
											lv_operation_4_0,
											"org.xtext.policy.Rules.OperationType");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_5='by'
							{
								newLeafNode(otherlv_5, grammarAccess.getPolicyAccess().getByKeyword_2_1());
							}
							otherlv_6='default'
							{
								newLeafNode(otherlv_6, grammarAccess.getPolicyAccess().getDefaultKeyword_2_2());
							}
							otherlv_7='{'
							{
								newLeafNode(otherlv_7, grammarAccess.getPolicyAccess().getLeftCurlyBracketKeyword_2_3());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getPolicyAccess().getRulesRuleParserRuleCall_2_4_0());
									}
									lv_rules_8_0=ruleRule
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPolicyRule());
										}
										add(
											$current,
											"rules",
											lv_rules_8_0,
											"org.xtext.policy.Rules.Rule");
										afterParserOrEnumRuleCall();
									}
								)
							)*
							otherlv_9='}'
							{
								newLeafNode(otherlv_9, grammarAccess.getPolicyAccess().getRightCurlyBracketKeyword_2_5());
							}
							otherlv_10='with'
							{
								newLeafNode(otherlv_10, grammarAccess.getPolicyAccess().getWithKeyword_2_6());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getPolicyAccess().getResolutionResolutionTypeEnumRuleCall_2_7_0());
									}
									lv_resolution_11_0=ruleResolutionType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPolicyRule());
										}
										set(
											$current,
											"resolution",
											lv_resolution_11_0,
											"org.xtext.policy.Rules.ResolutionType");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_12='resolution'
							{
								newLeafNode(otherlv_12, grammarAccess.getPolicyAccess().getResolutionKeyword_2_8());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPolicyAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getPolicyAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getPolicyAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getRuleAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRuleAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='rule'
							{
								newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getRuleKeyword_0_0());
							}
							(
								(
									lv_name_2_0=RULE_ID
									{
										newLeafNode(lv_name_2_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getRuleRule());
										}
										setWithLastConsumed(
											$current,
											"name",
											lv_name_2_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRuleAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getRuleAccess().getAccessAccessibilityLevelEnumRuleCall_1_0());
								}
								lv_access_3_0=ruleAccessibilityLevel
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getRuleRule());
									}
									set(
										$current,
										"access",
										lv_access_3_0,
										"org.xtext.policy.Rules.AccessibilityLevel");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRuleAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getRuleAccess().getOperationOperationTypeEnumRuleCall_2_0_0());
									}
									lv_operation_4_0=ruleOperationType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getRuleRule());
										}
										set(
											$current,
											"operation",
											lv_operation_4_0,
											"org.xtext.policy.Rules.OperationType");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_5='to'
							{
								newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getToKeyword_2_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getRuleAccess().getUserUserParserRuleCall_2_2_0());
									}
									lv_user_6_0=ruleUser
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getRuleRule());
										}
										set(
											$current,
											"user",
											lv_user_6_0,
											"org.xtext.policy.Rules.User");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_7='{'
							{
								newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2_3());
							}
							otherlv_8='query'
							{
								newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getQueryKeyword_2_4());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_2_5_0());
									}
									lv_query_9_0=ruleQuery
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getRuleRule());
										}
										set(
											$current,
											"query",
											lv_query_9_0,
											"org.xtext.policy.Rules.Query");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_10='}'
							{
								newLeafNode(otherlv_10, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_2_6());
							}
							(
								otherlv_11='with'
								{
									newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getWithKeyword_2_7_0());
								}
								(
									(
										lv_priority_12_0=RULE_INT
										{
											newLeafNode(lv_priority_12_0, grammarAccess.getRuleAccess().getPriorityINTTerminalRuleCall_2_7_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getRuleRule());
											}
											setWithLastConsumed(
												$current,
												"priority",
												lv_priority_12_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								otherlv_13='priority'
								{
									newLeafNode(otherlv_13, grammarAccess.getRuleAccess().getPriorityKeyword_2_7_2());
								}
							)?
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getRuleAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getRuleAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleUser
entryRuleUser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserRule()); }
	iv_ruleUser=ruleUser
	{ $current=$iv_ruleUser.current; }
	EOF;

// Rule User
ruleUser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getUserAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUserRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getQueryRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Rule AccessibilityLevel
ruleAccessibilityLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='allow'
			{
				$current = grammarAccess.getAccessibilityLevelAccess().getALLOWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAccessibilityLevelAccess().getALLOWEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='obfuscate'
			{
				$current = grammarAccess.getAccessibilityLevelAccess().getOBFUSCATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAccessibilityLevelAccess().getOBFUSCATEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='deny'
			{
				$current = grammarAccess.getAccessibilityLevelAccess().getDENYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAccessibilityLevelAccess().getDENYEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule OperationType
ruleOperationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='R'
			{
				$current = grammarAccess.getOperationTypeAccess().getREADEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperationTypeAccess().getREADEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='RW'
			{
				$current = grammarAccess.getOperationTypeAccess().getREADWRITEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperationTypeAccess().getREADWRITEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ResolutionType
ruleResolutionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='restrictive'
			{
				$current = grammarAccess.getResolutionTypeAccess().getRESTRICTIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getResolutionTypeAccess().getRESTRICTIVEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='permissive'
			{
				$current = grammarAccess.getResolutionTypeAccess().getPERMISSIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getResolutionTypeAccess().getPERMISSIVEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
