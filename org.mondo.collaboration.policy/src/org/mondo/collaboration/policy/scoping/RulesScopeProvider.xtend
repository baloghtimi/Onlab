/*
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.scoping

import org.eclipse.emf.ecore.EReference
import org.mondo.collaboration.policy.rules.Rule
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.URI
import org.eclipse.viatra.query.patternlanguage.patternLanguage.Pattern
import org.mondo.collaboration.policy.rules.Query
import org.mondo.collaboration.policy.rules.Parameter

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class RulesScopeProvider extends AbstractRulesScopeProvider {
	def scope_Parameter_variable(Parameter parameter, EReference ref) {
		val rule = parameter.eContainer.eContainer as Rule
		return Scopes::scopeFor(rule.query.pattern.parameters)
	}	
	
	def scope_Query_pattern(Query query, EReference ref) {
		return Scopes::scopeFor(patterns(query.eResource))
	}

	def patterns(Resource ruleResource) {
		val ruleURI = ruleResource.URI.toString
		val queryURI = ruleURI.replace("rules.maclr", "queries.eiq")
		val queryResource = ruleResource.resourceSet.getResource(URI.createURI(queryURI),true)
		val patterns = queryResource.allContents.filter(Pattern).toList
		return patterns
	}

}
