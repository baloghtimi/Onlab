/**
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.scoping;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.viatra.query.patternlanguage.patternLanguage.Pattern;
import org.eclipse.viatra.query.patternlanguage.patternLanguage.Variable;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.mondo.collaboration.policy.rules.Parameter;
import org.mondo.collaboration.policy.rules.Query;
import org.mondo.collaboration.policy.rules.Rule;
import org.mondo.collaboration.policy.scoping.AbstractRulesScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class RulesScopeProvider extends AbstractRulesScopeProvider {
  public IScope scope_Parameter_variable(final Parameter parameter, final EReference ref) {
    EObject _eContainer = parameter.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    final Rule rule = ((Rule) _eContainer_1);
    Query _query = rule.getQuery();
    Pattern _pattern = _query.getPattern();
    EList<Variable> _parameters = _pattern.getParameters();
    return Scopes.scopeFor(_parameters);
  }
  
  public IScope scope_Query_pattern(final Query query, final EReference ref) {
    Resource _eResource = query.eResource();
    List<Pattern> _patterns = this.patterns(_eResource);
    return Scopes.scopeFor(_patterns);
  }
  
  public List<Pattern> patterns(final Resource ruleResource) {
    URI _uRI = ruleResource.getURI();
    final String ruleURI = _uRI.toString();
    final String queryURI = ruleURI.replace("rules.maclr", "queries.eiq");
    ResourceSet _resourceSet = ruleResource.getResourceSet();
    URI _createURI = URI.createURI(queryURI);
    final Resource queryResource = _resourceSet.getResource(_createURI, true);
    TreeIterator<EObject> _allContents = queryResource.getAllContents();
    Iterator<Pattern> _filter = Iterators.<Pattern>filter(_allContents, Pattern.class);
    final List<Pattern> patterns = IteratorExtensions.<Pattern>toList(_filter);
    return patterns;
  }
}
