/**
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.rules.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.mondo.collaboration.policy.rules.ReferenceFact;
import org.mondo.collaboration.policy.rules.RulesPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reference Fact</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.mondo.collaboration.policy.rules.impl.ReferenceFactImpl#getSrcObject <em>Src Object</em>}</li>
 *   <li>{@link org.mondo.collaboration.policy.rules.impl.ReferenceFactImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link org.mondo.collaboration.policy.rules.impl.ReferenceFactImpl#getTrgObject <em>Trg Object</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReferenceFactImpl extends MinimalEObjectImpl.Container implements ReferenceFact
{
  /**
   * The cached value of the '{@link #getSrcObject() <em>Src Object</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrcObject()
   * @generated
   * @ordered
   */
  protected EObject srcObject;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected EReference reference;

  /**
   * The cached value of the '{@link #getTrgObject() <em>Trg Object</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrgObject()
   * @generated
   * @ordered
   */
  protected EObject trgObject;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReferenceFactImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RulesPackage.Literals.REFERENCE_FACT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getSrcObject()
  {
    if (srcObject != null && srcObject.eIsProxy())
    {
      InternalEObject oldSrcObject = (InternalEObject)srcObject;
      srcObject = eResolveProxy(oldSrcObject);
      if (srcObject != oldSrcObject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RulesPackage.REFERENCE_FACT__SRC_OBJECT, oldSrcObject, srcObject));
      }
    }
    return srcObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetSrcObject()
  {
    return srcObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSrcObject(EObject newSrcObject)
  {
    EObject oldSrcObject = srcObject;
    srcObject = newSrcObject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.REFERENCE_FACT__SRC_OBJECT, oldSrcObject, srcObject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReference()
  {
    if (reference != null && reference.eIsProxy())
    {
      InternalEObject oldReference = (InternalEObject)reference;
      reference = (EReference)eResolveProxy(oldReference);
      if (reference != oldReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RulesPackage.REFERENCE_FACT__REFERENCE, oldReference, reference));
      }
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference basicGetReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReference(EReference newReference)
  {
    EReference oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.REFERENCE_FACT__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getTrgObject()
  {
    if (trgObject != null && trgObject.eIsProxy())
    {
      InternalEObject oldTrgObject = (InternalEObject)trgObject;
      trgObject = eResolveProxy(oldTrgObject);
      if (trgObject != oldTrgObject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RulesPackage.REFERENCE_FACT__TRG_OBJECT, oldTrgObject, trgObject));
      }
    }
    return trgObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetTrgObject()
  {
    return trgObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrgObject(EObject newTrgObject)
  {
    EObject oldTrgObject = trgObject;
    trgObject = newTrgObject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.REFERENCE_FACT__TRG_OBJECT, oldTrgObject, trgObject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RulesPackage.REFERENCE_FACT__SRC_OBJECT:
        if (resolve) return getSrcObject();
        return basicGetSrcObject();
      case RulesPackage.REFERENCE_FACT__REFERENCE:
        if (resolve) return getReference();
        return basicGetReference();
      case RulesPackage.REFERENCE_FACT__TRG_OBJECT:
        if (resolve) return getTrgObject();
        return basicGetTrgObject();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RulesPackage.REFERENCE_FACT__SRC_OBJECT:
        setSrcObject((EObject)newValue);
        return;
      case RulesPackage.REFERENCE_FACT__REFERENCE:
        setReference((EReference)newValue);
        return;
      case RulesPackage.REFERENCE_FACT__TRG_OBJECT:
        setTrgObject((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.REFERENCE_FACT__SRC_OBJECT:
        setSrcObject((EObject)null);
        return;
      case RulesPackage.REFERENCE_FACT__REFERENCE:
        setReference((EReference)null);
        return;
      case RulesPackage.REFERENCE_FACT__TRG_OBJECT:
        setTrgObject((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.REFERENCE_FACT__SRC_OBJECT:
        return srcObject != null;
      case RulesPackage.REFERENCE_FACT__REFERENCE:
        return reference != null;
      case RulesPackage.REFERENCE_FACT__TRG_OBJECT:
        return trgObject != null;
    }
    return super.eIsSet(featureID);
  }

} //ReferenceFactImpl
