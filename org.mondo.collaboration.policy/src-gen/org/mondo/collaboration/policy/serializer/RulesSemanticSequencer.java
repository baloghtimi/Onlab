/*
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mondo.collaboration.policy.rules.AttributeFact;
import org.mondo.collaboration.policy.rules.Binding;
import org.mondo.collaboration.policy.rules.Group;
import org.mondo.collaboration.policy.rules.Model;
import org.mondo.collaboration.policy.rules.ObjectBind;
import org.mondo.collaboration.policy.rules.ObjectFact;
import org.mondo.collaboration.policy.rules.Policy;
import org.mondo.collaboration.policy.rules.ReferenceFact;
import org.mondo.collaboration.policy.rules.Rule;
import org.mondo.collaboration.policy.rules.RulesPackage;
import org.mondo.collaboration.policy.rules.User;
import org.mondo.collaboration.policy.rules.ValueBind;
import org.mondo.collaboration.policy.services.RulesGrammarAccess;

@SuppressWarnings("all")
public class RulesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RulesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RulesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RulesPackage.ATTRIBUTE_FACT:
				sequence_AttributeFact(context, (AttributeFact) semanticObject); 
				return; 
			case RulesPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case RulesPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case RulesPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RulesPackage.OBJECT_BIND:
				sequence_ObjectBind(context, (ObjectBind) semanticObject); 
				return; 
			case RulesPackage.OBJECT_FACT:
				sequence_ObjectFact(context, (ObjectFact) semanticObject); 
				return; 
			case RulesPackage.POLICY:
				sequence_Policy(context, (Policy) semanticObject); 
				return; 
			case RulesPackage.REFERENCE_FACT:
				sequence_ReferenceFact(context, (ReferenceFact) semanticObject); 
				return; 
			case RulesPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case RulesPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			case RulesPackage.VALUE_BIND:
				sequence_ValueBind(context, (ValueBind) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Asset returns AttributeFact
	 *     AttributeFact returns AttributeFact
	 *
	 * Constraint:
	 *     variable=[Variable|ID]
	 */
	protected void sequence_AttributeFact(ISerializationContext context, AttributeFact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.ATTRIBUTE_FACT__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.ATTRIBUTE_FACT__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeFactAccess().getVariableVariableIDTerminalRuleCall_1_0_1(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (variable=[Variable|ID] bind=Bind)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.BINDING__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.BINDING__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.BINDING__BIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.BINDING__BIND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getVariableVariableIDTerminalRuleCall_1_0_1(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getBindingAccess().getBindBindParserRuleCall_4_0(), semanticObject.getBind());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (name=ID users+=[User|ID] users+=[User|ID]*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (roles+=Role* policy=Policy)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bind returns ObjectBind
	 *     ObjectBind returns ObjectBind
	 *
	 * Constraint:
	 *     object=[EObject|ID]
	 */
	protected void sequence_ObjectBind(ISerializationContext context, ObjectBind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.OBJECT_BIND__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.OBJECT_BIND__OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectBindAccess().getObjectEObjectIDTerminalRuleCall_1_0_1(), semanticObject.getObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Asset returns ObjectFact
	 *     ObjectFact returns ObjectFact
	 *
	 * Constraint:
	 *     variable=[Variable|ID]
	 */
	protected void sequence_ObjectFact(ISerializationContext context, ObjectFact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.OBJECT_FACT__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.OBJECT_FACT__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectFactAccess().getVariableVariableIDTerminalRuleCall_1_0_1(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Policy returns Policy
	 *
	 * Constraint:
	 *     (name=ID access=AccessibilityLevel operation=OperationType rules+=Rule* resolution=ResolutionType)
	 */
	protected void sequence_Policy(ISerializationContext context, Policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Asset returns ReferenceFact
	 *     ReferenceFact returns ReferenceFact
	 *
	 * Constraint:
	 *     (sourceVar=[Variable|ID] targetVar=[Variable|ID] reference=[EReference|ID])
	 */
	protected void sequence_ReferenceFact(ISerializationContext context, ReferenceFact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.REFERENCE_FACT__SOURCE_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.REFERENCE_FACT__SOURCE_VAR));
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.REFERENCE_FACT__TARGET_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.REFERENCE_FACT__TARGET_VAR));
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.REFERENCE_FACT__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.REFERENCE_FACT__REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceFactAccess().getSourceVarVariableIDTerminalRuleCall_1_0_1(), semanticObject.getSourceVar());
		feeder.accept(grammarAccess.getReferenceFactAccess().getTargetVarVariableIDTerminalRuleCall_3_0_1(), semanticObject.getTargetVar());
		feeder.accept(grammarAccess.getReferenceFactAccess().getReferenceEReferenceIDTerminalRuleCall_5_0_1(), semanticObject.getReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         access=AccessibilityLevel 
	 *         operation=OperationType 
	 *         roles+=[Role|ID] 
	 *         roles+=[Role|ID]* 
	 *         pattern=[Pattern|STRING] 
	 *         asset=Asset 
	 *         bindings+=Binding* 
	 *         priority=INT?
	 *     )
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Role returns User
	 *     User returns User
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.ROLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bind returns ValueBind
	 *     ValueBind returns ValueBind
	 *
	 * Constraint:
	 *     value=ValueType
	 */
	protected void sequence_ValueBind(ISerializationContext context, ValueBind semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALUE_BIND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALUE_BIND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueBindAccess().getValueValueTypeEnumRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
