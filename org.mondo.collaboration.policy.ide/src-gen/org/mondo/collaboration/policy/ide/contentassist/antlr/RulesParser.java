/*
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.mondo.collaboration.policy.ide.contentassist.antlr.internal.InternalRulesParser;
import org.mondo.collaboration.policy.services.RulesGrammarAccess;

public class RulesParser extends AbstractContentAssistParser {

	@Inject
	private RulesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRulesParser createParser() {
		InternalRulesParser result = new InternalRulesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getAccessibilityLevelAccess().getAlternatives(), "rule__AccessibilityLevel__Alternatives");
					put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
					put(grammarAccess.getAssetTypeAccess().getAlternatives(), "rule__AssetType__Alternatives");
					put(grammarAccess.getResolutionTypeAccess().getAlternatives(), "rule__ResolutionType__Alternatives");
					put(grammarAccess.getPolicyAccess().getGroup_0(), "rule__Policy__Group_0__0");
					put(grammarAccess.getPolicyAccess().getGroup_2(), "rule__Policy__Group_2__0");
					put(grammarAccess.getRuleAccess().getGroup_0(), "rule__Rule__Group_0__0");
					put(grammarAccess.getRuleAccess().getGroup_2(), "rule__Rule__Group_2__0");
					put(grammarAccess.getRuleAccess().getGroup_2_9(), "rule__Rule__Group_2_9__0");
					put(grammarAccess.getRuleAccess().getGroup_2_11(), "rule__Rule__Group_2_11__0");
					put(grammarAccess.getObjectFactAccess().getGroup(), "rule__ObjectFact__Group__0");
					put(grammarAccess.getReferenceFactAccess().getGroup(), "rule__ReferenceFact__Group__0");
					put(grammarAccess.getAttributeFactAccess().getGroup(), "rule__AttributeFact__Group__0");
					put(grammarAccess.getModelAccess().getPolicyAssignment(), "rule__Model__PolicyAssignment");
					put(grammarAccess.getPolicyAccess().getNameAssignment_0_1(), "rule__Policy__NameAssignment_0_1");
					put(grammarAccess.getPolicyAccess().getAccessAssignment_1(), "rule__Policy__AccessAssignment_1");
					put(grammarAccess.getPolicyAccess().getOperationAssignment_2_0(), "rule__Policy__OperationAssignment_2_0");
					put(grammarAccess.getPolicyAccess().getRulesAssignment_2_4(), "rule__Policy__RulesAssignment_2_4");
					put(grammarAccess.getPolicyAccess().getResolutionAssignment_2_7(), "rule__Policy__ResolutionAssignment_2_7");
					put(grammarAccess.getRuleAccess().getNameAssignment_0_1(), "rule__Rule__NameAssignment_0_1");
					put(grammarAccess.getRuleAccess().getAccessAssignment_1(), "rule__Rule__AccessAssignment_1");
					put(grammarAccess.getRuleAccess().getOperationAssignment_2_0(), "rule__Rule__OperationAssignment_2_0");
					put(grammarAccess.getRuleAccess().getUserAssignment_2_2(), "rule__Rule__UserAssignment_2_2");
					put(grammarAccess.getRuleAccess().getAssetAssignment_2_5(), "rule__Rule__AssetAssignment_2_5");
					put(grammarAccess.getRuleAccess().getQueryAssignment_2_8(), "rule__Rule__QueryAssignment_2_8");
					put(grammarAccess.getRuleAccess().getPriorityAssignment_2_11_1(), "rule__Rule__PriorityAssignment_2_11_1");
					put(grammarAccess.getUserAccess().getNameAssignment(), "rule__User__NameAssignment");
					put(grammarAccess.getQueryAccess().getNameAssignment(), "rule__Query__NameAssignment");
					put(grammarAccess.getObjectFactAccess().getObjectAssignment_1(), "rule__ObjectFact__ObjectAssignment_1");
					put(grammarAccess.getObjectFactAccess().getTypeAssignment_3(), "rule__ObjectFact__TypeAssignment_3");
					put(grammarAccess.getReferenceFactAccess().getSrcObjectAssignment_1(), "rule__ReferenceFact__SrcObjectAssignment_1");
					put(grammarAccess.getReferenceFactAccess().getReferenceAssignment_3(), "rule__ReferenceFact__ReferenceAssignment_3");
					put(grammarAccess.getReferenceFactAccess().getTrgObjectAssignment_5(), "rule__ReferenceFact__TrgObjectAssignment_5");
					put(grammarAccess.getAttributeFactAccess().getObjectAssignment_1(), "rule__AttributeFact__ObjectAssignment_1");
					put(grammarAccess.getAttributeFactAccess().getAttributeAssignment_3(), "rule__AttributeFact__AttributeAssignment_3");
					put(grammarAccess.getAttributeFactAccess().getValueAssignment_5(), "rule__AttributeFact__ValueAssignment_5");
					put(grammarAccess.getPolicyAccess().getUnorderedGroup(), "rule__Policy__UnorderedGroup");
					put(grammarAccess.getRuleAccess().getUnorderedGroup(), "rule__Rule__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRulesParser typedParser = (InternalRulesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RulesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RulesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
